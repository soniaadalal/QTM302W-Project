abline(v = mod.logit$coefficients[4], col="red", lwd=3, lty=2)
p <- 2*mean(beta >= abs(mod.logit$coefficients[2]))
p
hist(SE.out, prob = TRUE, main = "Permutation Distribution of Beta_1")
lines(density(SE.out), col = 2, lwd = 2)
abline(v = mod.logit$coefficients[4], col="red", lwd=3, lty=2)
set.seed(100)
M <- 500
beta <- matrix(NA, M, 5)
for(i in 1:M){
subprime_resampled <- subprime[sample(nrow(subprime), replace = T),]
mod2 <- glm(high.rate ~ income + I(income^2) + black + woman,
family = binomial(link = "logit"), subprime_resampled)
beta[i,] <- mod2$coefficients
}
hist(beta[,4], prob = TRUE, main = "Bootstrap Distribution of Beta_4")
lines(density(beta[,4]), col = 2, lwd = 2)
print(paste0("[",quantile(beta[,4], 0.025),",", quantile(beta[,4], 0.975),"]"))
set.seed(100)
M <- 500
beta <- c()
for(i in 1:M){
shuffle_black <- sample(subprime$black)
mod3 <- glm(high.rate ~ income + I(income^2) + shuffle_black + woman,
family = binomial(link = "logit"), subprime)
beta[i] <- mod3$coefficients[4]
}
hist(beta, prob = TRUE, main = "Permutation Distribution of Beta_4")
lines(density(beta), col = 2, lwd = 2)
abline(v = mod.logit$coefficients[4], col="purple", lwd = 3, lty = 2)
p <- 2*mean(beta >= abs(mod.logit$coefficients[4]))
p
set.seed(100)
M <- 500
beta <- c()
for(i in 1:M){
shuffle_black <- sample(subprime$black)
mod3 <- glm(high.rate ~ income + I(income^2) + shuffle_black + woman,
family = binomial(link = "logit"), subprime)
beta[i] <- mod3$coefficients[4]
}
hist(beta, prob = TRUE, main = "Permutation Distribution of Beta_4")
lines(density(beta), col = 2, lwd = 2)
abline(v = mod.logit$coefficients[4], col="purple", lwd = 3, lty = 2)
p <- 2*mean(beta >= abs(mod.logit$coefficients[4]))
p
p
set.seed(100)
M <- 500
beta <- c()
for(i in 1:M){
shuffle_black <- sample(subprime$black)
mod3 <- glm(high.rate ~ income + I(income^2) + shuffle_black + woman,
family = binomial(link = "logit"), subprime)
beta[i] <- mod3$coefficients[4]
}
hist(beta, prob = TRUE, main = "Permutation Distribution of Beta_4")
lines(density(beta), col = 2, lwd = 2)
abline(v = mod.logit$coefficients[4], col="purple", lwd = 3, lty = 2)
p <- 2*mean(beta >= abs(mod.logit$coefficients[4]))
p
set.seed(100)
M <- 500
beta <- c()
for(i in 1:M){
shuffle_black <- sample(subprime$black)
mod3 <- glm(high.rate ~ income + I(income^2) + shuffle_black + woman,
family = binomial(link = "logit"), subprime)
beta[i] <- mod3$coefficients[4]
}
hist(beta, prob = TRUE, main = "Permutation Distribution of Beta_4")
lines(density(beta), col = 2, lwd = 2)
abline(v = mod1$coefficients[4], col="purple", lwd = 3, lty = 2)
p <- 2*mean(beta >= abs(mod1$coefficients[4]))
p
mod2 <- glm(high.rate ~ income + I(income^2) + black + woman, family = binomial(link = "logit"), subprime)
summary(mod2)
income_seq <- seq(min(subprime$income), max(subprime$income), 0.01)
n <- length(income_seq)
predicted <- predict(mod2, newdata = data.frame("income" = income_seq, "black" = rep(1,n), "woman" = rep(1,n), type = "response"))
predicted2 <- predict(mod2, newdata = data.frame("income" = income_seq, "black" = rep(0,n), "woman" = rep(0,n), type = "response"))
plot(x = subprime$income, y = subprime$high.rate, xlab = "PI ratio",
ylab = "Approval Probability",
pch = 19, ylim = c(-0.8, 1.6), cex.main = 0.8)
# Thresholds
abline(h = 1, lty = 2, col = "darkred")
abline(h = 0, lty = 2, col = "darkred")
text(2.5, 0.9, cex = 0.8, "Approved")
text(2.5, -0.1, cex= 0.8, "Denied")
# Prediction curve
lines(income_seq, predicted, lwd = 2, col = 4)
lines(income_seq, predicted2, lwd = 2, col = 3)
legend(0, 1.4, legend=c("predicted2","predicted"), col=c(3,4), lty=1, cex=0.8)
set.seed(100)
M <- 500
beta <- c()
for(i in 1:M){
shuffle_black <- sample(subprime$black)
mod3 <- glm(high.rate ~ income + I(income^2) + shuffle_black + woman,
family = binomial(link = "logit"), subprime)
beta[i] <- mod3$coefficients[4]
}
hist(beta, prob = TRUE, main = "Permutation Distribution of Beta_4")
lines(density(beta), col = 2, lwd = 2)
abline(v = mod2$coefficients[4], col="purple", lwd = 3, lty = 2)
p <- 2*mean(beta >= abs(mod2$coefficients[4]))
p
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
setwd("/Users/soniadalal/Desktop/302W/302W Project/data/data and replication code")
library(readr)
data_replic <- read_csv("data_replic.csv")
View(data_replic)
library(readr)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
data_replic <- read_csv("data_replic.csv")
library(readr)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
data_replic <- read_csv("/Users/soniadalal/Desktop/302W/302W Project/data/data and replication code/data_replic.csv")
head(data_replic)
summary(data_replic)
install.packages("renv")
library(readr)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
data_replic <- read_csv("/Users/soniadalal/Desktop/302W/302W Project/data/data and replication code/data_replic.csv")
head(data_replic)
summary(data_replic)
renv::init()
Sure, let's break it down into explicit steps:
renv::init(force = TRUE)
renv::snapshot()
renv::snapshot()
renv::snapshot()
renv::activate()
renv::snapshot()
install.packages("corrplot")
library(readr)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
data_replic <- read_csv("/Users/soniadalal/Desktop/302W/302W Project/data/data and replication code/data_replic.csv")
head(data_replic)
summary(data_replic)
df <- data_replic %>%
select(-...19, -...23)
newdf <- data_replic %>%
select(-...19, -...23) %>%
filter(!is.na(deport_nonconvict) & !is.na(homrates_unodc) & !is.na(region) & !is.na(deport_convict) & !is.na(income_group))
newdf
install.packages("corrplot")
library(corrplot)
df <- df %>%
mutate(
income_group_numeric = case_when(
income_group == "Low income" ~ 1,
income_group == "Lower middle income" ~ 2,
income_group == "Upper middle income" ~ 3,
income_group == "High income: nonOECD" ~ 4,
income_group == "High income: OECD" ~ 5,
TRUE ~ NA_real_  # Handles any cases that don't match the above
)
)
# Select relevant variables and remove NA values for correlation analysis
cor_data <- df %>%
select(corruption, homrates_unodc, GDPpercapita_const2010USD_log, urban_interp, year, deport_convict, deport_nonconvict, polity2, yr_sch, income_group_numeric) %>%
na.omit()  # Remove rows with NA values
# Calculate the correlation matrix
cor_matrix <- cor(cor_data)
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust",
addCoef.col = "black",  # Add correlation coefficients to enhance readability
tl.col = "black", tl.srt = 45,  # Adjust text label color and rotation for better visibility
diag = FALSE,  # Exclude diagonal elements to avoid redundancy
number.cex = 0.8,  # Adjust size of correlation coefficients
tl.cex = 0.8)
# Bar plot
ggplot(df, aes(x = region, fill = income_group)) +
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Income Distribution Counts for Each Region")
# Bar plot
ggplot(df, aes(x = region, fill = deport_convict)) +
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Convict Deportation Rate Distribution Counts per Region")
# Bar plot
ggplot(df, aes(x = region, fill = deport_nonconvict)) +
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Non-Convict Deportation Rate Distribution Counts per Region")
# Bar plot
ggplot(df, aes(x = region, fill = corruption)) +
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Corruption Score Distribution Counts per Region")
# Filter the dataset to include only relevant variables
corruption_data <- data_replic %>%
select(region, corruption)
# Summary statistics by region
summary_stats <- corruption_data %>%
group_by(region) %>%
summarise(mean_corruption = mean(corruption, na.rm = TRUE),
median_corruption = median(corruption, na.rm = TRUE),
min_corruption = min(corruption, na.rm = TRUE),
max_corruption = max(corruption, na.rm = TRUE))
# Visualization: Box plot of corruption scores by region
boxplot_corruption <- ggplot(corruption_data, aes(x = region, y = corruption, fill = region)) +
geom_boxplot() +
labs(title = "Corruption Scores by Region",
x = "Region",
y = "Corruption Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Display the summary statistics and box plot
print(summary_stats)
print(boxplot_corruption)
# Calculate the count per income group within each region
newdf_with_count <- newdf %>%
group_by(region, income_group) %>%
summarise(count = n(), .groups = 'drop')
new
# Calculate the total count per region
totals <- newdf_with_count %>%
group_by(region) %>%
summarise(total = sum(count), .groups = 'drop')
# Join the totals back to the original data frame
newdf_with_proportions <- newdf_with_count %>%
left_join(totals, by = "region") %>%
mutate(proportion = count / total)
# Plot the proportions instead of count
ggplot(newdf_with_proportions, aes(x = region, y = proportion, fill = income_group)) +
geom_bar(position = "dodge", stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Proportion")
# Order the income_group factor based on income levels from highest to lowest
newdf_with_proportions$income_group <- factor(
newdf_with_proportions$income_group,
levels = c(
"Low income",
"Lower middle income",
"Upper middle income",
"High income: nonOECD",
"High income: OECD"
),
ordered = TRUE
)
ggplot(newdf_with_proportions, aes(x = region, y = proportion, fill = income_group)) +
geom_bar(stat = "identity", position = position_dodge(preserve = 'single')) +
scale_fill_brewer(palette = "Blues", direction = -1) + # Use reversed Blues palette for darker colors on lower incomes
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Proportion", fill = "Income Group")
ggplot(newdf, aes(x = deport_convict, y = homrates_unodc)) +
geom_point(aes(color = region), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~ region, scale = "free") +
labs(title = "Correlation Between Convict Deportation Rates and Homicide Rates by Region",
x = "Convict Deportation Rate",
y = "UNODC Homicide Rate")
ggplot(newdf, aes(x = deport_convict, y = homrates_unodc)) +
geom_point(aes(color = region), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~ region) +
labs(title = "Correlation Between Convict Deportation Rates and Homicide Rates by Region",
x = "Non-Convict Deportation Rate",
y = "UNODC Homicide Rate")
correlation_by_region <- newdf %>%
group_by(region) %>%
summarize(correlation = cor(deport_convict, homrates_unodc, use = "complete.obs"))
print(correlation_by_region)
ggplot(newdf, aes(x = deport_nonconvict, y = homrates_unodc)) +
geom_point(aes(color = region), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~ region, scale = "free") +
labs(title = "Correlation Between Non-Convict Deportation Rates and Homicide Rates by Region",
x = "Non-Convict Deportation Rate",
y = "UNODC Homicide Rate")
ggplot(newdf, aes(x = deport_nonconvict, y = homrates_unodc)) +
geom_point(aes(color = region), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~ region) +
labs(title = "Correlation Between Non-Convict Deportation Rates and Homicide Rates by Region",
x = "Non-Convict Deportation Rate",
y = "UNODC Homicide Rate")
correlation_by_region2 <- newdf %>%
group_by(region) %>%
summarize(correlation = cor(deport_nonconvict, homrates_unodc, use = "complete.obs"))
print(correlation_by_region2)
# Preparing the data by ensuring 'year' is available and correctly formatted
newdf <- mutate(newdf, year = as.integer(year))
# Combine into one dataframe for plotting
# Plotting the histogram of year distributions across datasets
ggplot(newdf, aes(x = year)) +
geom_histogram(position = "identity", alpha = 0.5, binwidth = 1) +
labs(title = "Distribution of Years", x = "Year", y = "Count") +
scale_fill_manual(values = c("blue", "red", "green")) +
theme_minimal()
# Filter the dataset for Latin America & Caribbean region
latin_america_data <- newdf %>%
filter(region == "Latin America & Caribbean")
# Impute missing data for odd years using linear interpolation
imputed_data1 <- latin_america_data %>%
tidyr::complete(year = seq(min(year), max(year), by = 2)) %>%
mutate(homrates_unodc = approx(year[!is.na(homrates_unodc)], homrates_unodc[!is.na(homrates_unodc)], year)$y)
# Create the line plot
ggplot(imputed_data1, aes(x = year, y = homrates_unodc)) +
geom_line() +
labs(title = "Homicide Rates in Latin America & Caribbean",
x = "Year",
y = "Homicide Rates (per 100,000 population)") +
theme_minimal()
# Filter the dataset for Latin America & Caribbean region
europe_central_asia_data <- newdf %>%
filter(region == "Europe & Central Asia")
# Impute missing data for odd years using linear interpolation
imputed_data2 <- europe_central_asia_data %>%
tidyr::complete(year = seq(min(year), max(year), by = 2)) %>%
mutate(homrates_unodc = approx(year[!is.na(homrates_unodc)], homrates_unodc[!is.na(homrates_unodc)], year)$y)
# Create the line plot
ggplot(imputed_data2, aes(x = year, y = homrates_unodc)) +
geom_line() +
labs(title = "Homicide Rates in Europe and Central Asia",
x = "Year",
y = "Homicide Rates (per 100,000 population)") +
theme_minimal()
combined_data <- rbind(imputed_data1, imputed_data2)
ggplot(combined_data, aes(x = year, y = homrates_unodc, color = region)) +
geom_line() +
labs(title = "Homicide Rates in Latin America & Caribbean vs. Europe & Central Asia",
x = "Year",
y = "Homicide Rates (per 100,000 population)") +
theme_minimal() +
scale_color_manual(values = c("blue", "red"))
# Filter the dataset for Latin America & Caribbean region
latin_america_data <- newdf %>%
filter(region == "Latin America & Caribbean")
# Impute missing data for odd years using linear interpolation
imputed_data <- latin_america_data %>%
tidyr::complete(year = seq(min(year), max(year), by = 2)) %>%
mutate(homrates_unodc = approx(year[!is.na(homrates_unodc)], homrates_unodc[!is.na(homrates_unodc)], year)$y,
deport_convict = approx(year[!is.na(deport_convict)], deport_convict[!is.na(deport_convict)], year)$y,
deport_nonconvict = approx(year[!is.na(deport_nonconvict)], deport_nonconvict[!is.na(deport_nonconvict)], year)$y)
# Create the line plot
ggplot(imputed_data, aes(x = year, y = homrates_unodc)) +
geom_line(aes(color = "Homicide Rates"), size = 1) +
geom_line(aes(y = deport_convict, color = "Convict Deportation Rates"), linetype = "dashed", size = 1) +
geom_line(aes(y = deport_nonconvict, color = "Non-Convict Deportation Rates"), linetype = "dotdash", size = 1) +
labs(title = "Homicide and Deportation Rates in Latin America & Caribbean",
x = "Year",
y = "Rates per 100,000 population",
color = "Legend") +
scale_color_manual(values = c("Homicide Rates" = "red",
"Convict Deportation Rates" = "blue",
"Non-Convict Deportation Rates" = "green")) +
theme_minimal() +
theme(legend.title = element_blank())
# Filter data for Europe & Central Asia
europe_data <- newdf %>%
filter(region == "Europe & Central Asia")
# Impute missing data for odd years using linear interpolation
imputed_europe_data <- europe_data %>%
tidyr::complete(year = seq(min(year), max(year), by = 2)) %>%
mutate(homrates_unodc = approx(year[!is.na(homrates_unodc)], homrates_unodc[!is.na(homrates_unodc)], year)$y,
deport_convict = approx(year[!is.na(deport_convict)], deport_convict[!is.na(deport_convict)], year)$y,
deport_nonconvict = approx(year[!is.na(deport_nonconvict)], deport_nonconvict[!is.na(deport_nonconvict)], year)$y)
# Create the plot for Europe & Central Asia
plot_europe <- ggplot(imputed_europe_data) +
geom_line(aes(x = year, y = homrates_unodc, color = "Homicide Rates"), size = 1) +
geom_line(aes(x = year, y = deport_convict, color = "Convict Deportation Rates"), size = 1, linetype = "dashed") +
geom_line(aes(x = year, y = deport_nonconvict, color = "Non-Convict Deportation Rates"), size = 1, linetype = "dotdash") +
labs(title = "Homicide and Deportation Rates in Europe & Central Asia",
x = "Year",
y = "Rates per 100,000 population",
color = "Legend") +
scale_color_manual(values = c("Homicide Rates" = "red",
"Convict Deportation Rates" = "blue",
"Non-Convict Deportation Rates" = "green")) +
theme_minimal() +
theme(legend.title = element_blank())
# Display the plot for Europe & Central Asia
plot_europe
latin_america_tot <- df %>%
filter(region == "Latin America & Caribbean")
imputed_latin_america_tot <- latin_america_tot %>%
tidyr::complete(year = seq(min(year), max(year), by = 2)) %>%
mutate(deport_convict = approx(year[!is.na(deport_convict)], deport_convict[!is.na(deport_convict)], year)$y,
deport_nonconvict = approx(year[!is.na(deport_nonconvict)], deport_nonconvict[!is.na(deport_nonconvict)], year)$y)
ggplot(imputed_latin_america_tot) +
geom_line(aes(x = year, y = deport_convict, color = "Convict Deportation Rates"), size = 1) +
geom_line(aes(x = year, y = deport_nonconvict, color = "Non-Convict Deportation Rates"), size = 1) +
labs(title = "Deportation Rates in Latin America & Caribbean",
x = "Year",
y = "Rates per 100,000 population",
color = "Legend") +
scale_color_manual(values = c("Convict Deportation Rates" = "blue",
"Non-Convict Deportation Rates" = "green")) +
theme_minimal() +
theme(legend.title = element_blank())
europe_tot <- df %>%
filter(region == "Europe & Central Asia")
imputed_europe_tot <- europe_tot %>%
tidyr::complete(year = seq(min(year), max(year), by = 2)) %>%
mutate(deport_convict = approx(year[!is.na(deport_convict)], deport_convict[!is.na(deport_convict)], year)$y,
deport_nonconvict = approx(year[!is.na(deport_nonconvict)], deport_nonconvict[!is.na(deport_nonconvict)], year)$y)
ggplot(imputed_europe_tot) +
geom_line(aes(x = year, y = deport_convict, color = "Convict Deportation Rates"), size = 1) +
geom_line(aes(x = year, y = deport_nonconvict, color = "Non-Convict Deportation Rates"), size = 1) +
labs(title = "Deportation Rates in Latin America & Caribbean",
x = "Year",
y = "Rates per 100,000 population",
color = "Legend") +
scale_color_manual(values = c("Convict Deportation Rates" = "blue",
"Non-Convict Deportation Rates" = "green")) +
theme_minimal() +
theme(legend.title = element_blank())
# Filter the dataset to include only relevant variables and regions
region_data <- data_replic %>%
filter(region %in% c("Latin America & Caribbean", "Europe & Central Asia")) %>%
select(region, corruption, homrates_unodc)
# Visualization: Scatter plot of corruption scores vs. homicide rates by region
scatter_plot <- ggplot(region_data, aes(x = corruption, y = homrates_unodc, color = region)) +
geom_point() +
labs(title = "Corruption Scores vs. Homicide Rates",
x = "Corruption Score",
y = "Homicide Rate",
color = "Region") +
theme_minimal()
# Display the scatter plot
print(scatter_plot)
ggplot(newdf, aes(x = corruption, y = deport_convict)) +
geom_point(aes(color = region), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~ region, scale = "free") +
labs(title = "Correlation Between Corruption Scores and Convict Deportation Rates by Region",
x = "Corruption Score",
y = "Convict Deportation Rate")
ggplot(newdf, aes(x = corruption, y = deport_convict)) +
geom_point(aes(color = region), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~ region) +
labs(title = "Correlation Between Corruption Scores and Convict Deportation Rates by Region",
x = "Corruption Score",
y = "Convict Deportation Rate")
ggplot(newdf, aes(x = corruption, y = deport_nonconvict)) +
geom_point(aes(color = region), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~ region, scale = "free") +
labs(title = "Corruption Scores & Non-Convict Deportation Rates by Region",
x = "Corruption Score",
y = "Non-Convict Deportation Rate")
ggplot(newdf, aes(x = corruption, y = deport_nonconvict)) +
geom_point(aes(color = region), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~ region) +
labs(title = "Corruption Scores & Non-Convict Deportation Rates by Region",
x = "Corruption Score",
y = "Non-Convict Deportation Rate")
mean_rates <- newdf %>%
group_by(region) %>%
summarize(mean_homicide_rate = mean(homrates_unodc, na.rm = TRUE),
mean_deport_convict = mean(deport_convict, na.rm = TRUE),
mean_deport_nonconvict = mean(deport_nonconvict, na.rm = TRUE))
ggplot(mean_rates, aes(x = region)) +
geom_bar(aes(y = mean_homicide_rate), stat = "identity", position = "dodge", fill = "blue") +
labs(title = "Mean Homicide Rates by Region (2004-2014)",
x = "Region",
y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mean_rates, aes(x = region)) +
geom_bar(aes(y = mean_deport_convict), stat = "identity", position = "dodge", fill = "red") +
labs(title = "Mean Convict Deportation Rates by Region (2004-2014)",
x = "Region",
y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mean_rates, aes(x = region)) +
geom_bar(aes(y = mean_deport_nonconvict), stat = "identity", position = "dodge", fill = "green") +
labs(title = "Mean Non-Convict Rates by Region (2004-2014)",
x = "Region",
y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("/Users/soniadalal/Desktop/302W/302W Project/data/data and replication code")
library(readr)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
data_replic <- read_csv("/Users/soniadalal/Desktop/302W/302W Project/data/data and replication code/data_replic.csv")
head(data_replic)
summary(data_replic)
install.packages("yaml")
install.packages("rmarkdown")
library(readr)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
data_replic <- read_csv("/Users/soniadalal/Desktop/302W/302W Project/data/data and replication code/data_replic.csv")
head(data_replic)
summary(data_replic)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
